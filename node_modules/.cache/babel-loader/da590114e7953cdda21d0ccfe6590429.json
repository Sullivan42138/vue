{"remainingRequest":"/Users/sulliven/Desktop/vue/vue-cource/node_modules/babel-loader/lib/index.js!/Users/sulliven/Desktop/vue/vue-cource/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/sulliven/Desktop/vue/vue-cource/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/sulliven/Desktop/vue/vue-cource/src/views/store.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/sulliven/Desktop/vue/vue-cource/src/views/store.vue","mtime":1568035626276},{"path":"/Users/sulliven/Desktop/vue/vue-cource/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/sulliven/Desktop/vue/vue-cource/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/sulliven/Desktop/vue/vue-cource/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/sulliven/Desktop/vue/vue-cource/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport _defineProperty from \"/Users/sulliven/Desktop/vue/vue-cource/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Ainput from '_c/Ainput';\nimport Ashow from '_c/Ashow'; // 使用vuex提供的工具函数 去获取state当中的内容\n// es6结构复制 相当于\n// import vuex from 'vuex'\n// const mapState = vuex.mapState;\n// eslint-disable-next-line standard/object-curly-even-spacing,no-unused-vars\n\nimport { mapState, mapGetters, mapMutations, mapActions } from 'vuex'; // 如果设置了 namespaced: true 使用如下方法\n// import { createNamespacedHelpers } from 'vuex'\n// 可传入模块名称\n// const { mapState } = createNamespacedHelpers('user')\n\nexport default {\n  name: 'store',\n  data: function data() {\n    return {\n      inputValue: ''\n    };\n  },\n  // 注册这个组件\n  components: {\n    // eslint-disable-next-line vue/no-unused-components,no-undef\n    binput: Ainput,\n    bshow: Ashow\n  },\n  computed: _objectSpread({\n    appName: function appName() {\n      return this.$store.state.appName;\n    }\n  }, mapState({\n    // userName: state => state.userName,\n    appName: function appName(state) {\n      return state.appName;\n    },\n    appVersion: function appVersion(state) {\n      return state.appVersion;\n    },\n    // todoList: state => state.todo ? state.todo.todoList : []\n    // f访问子模块的方式\n    todoList: function todoList(state) {\n      return state.user.todo ? state.user.todo.todoList : [];\n    } // stateValue: state => state.stateValue\n\n  }), {\n    // 自定义 set get\n    stateValue: {\n      get: function get() {\n        return this.$store.state.stateValue;\n      },\n      set: function set(value) {\n        // this.SET_STATE_VALUE(value)\n        this.$store.commit('SET_STATE_VALUE', value);\n      }\n    }\n  }, mapState('user', {\n    userName: function userName(state) {\n      return state.userName;\n    }\n  }), {\n    // ...mapState({\n    //   userName: state => state.userName\n    // }),\n    inputValueLastLetter: function inputValueLastLetter() {\n      return this.inputValue.substr(-1, 1);\n    }\n  }, mapGetters('user', ['firstLetter']), {}, mapGetters(['appNameWitnVersion'])),\n  methods: _objectSpread({}, mapMutations(['SET_USERNAME', 'SET_APP_NAME', 'SET_STATE_VALUE']), {}, mapActions(['updateAppName']), {\n    handleInput: function handleInput(val) {\n      this.inputValue = val;\n    },\n    handleChangeAppName: function handleChangeAppName() {\n      // 一个计算属性一般情况下是只有一get方法的 所以不能直接赋值\n      // 而是要通过commit方法 提交给mutation 有mutation去修改他的值\n      // 当然 第二个参数也可以是对象的写法，只不过 对应方法里面取值的时候就得用对象的取法\n      // 还有一个参数 对象的写法如{\n      // type: 'SET_APP_NAME',\n      // appName: 'newAppName'\n      // }\n      // 对应的取值也是 params.appName\n      // this.$store.commit('SET_APP_NAME', 'newAppName')\n      // this.$store.commit('SET_APP_VERSION')\n      // 若使用了 ...mapMutations 写法如下\n      // this.SET_APP_NAME('newAppName')\n      this.updateAppName();\n    },\n    handleChangeUserName: function handleChangeUserName() {\n      // 在index当中是 非严格模式的时候 这样是可以修改过来的\n      // this.$store.state.user.userName = 'haha'\n      this.SET_USERNAME('vue-course'); // 使用store上的实例来触发action\n      // this.$store.dispatch('updateAppName', '123')\n    },\n    // registModule () {\n    //   // 动态添加模块\n    //   // 第一个参数是我们要动态添加的名称\n    //   this.$store.registerModule('todo', {\n    //     state: {\n    //       todoList: [\n    //         '学习mutations',\n    //         '学习actions'\n    //       ]\n    //     }\n    //   })\n    // },\n    // 给模块添加模块\n    registModule: function registModule() {\n      // 动态添加模块\n      // 第一个参数是我们要动态添加的名称\n      this.$store.registerModule(['user', 'todo'], {\n        state: {\n          todoList: ['学习mutations', '学习actions']\n        }\n      });\n    },\n    onStateValueChange: function onStateValueChange(val) {\n      console.log(val);\n      this.SET_STATE_VALUE(val);\n    }\n  })\n};",{"version":3,"sources":["store.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n <div>\n<!--   <binput v-model=\"stateValue\"/>-->\n<!--   <binput :value=\"stateValue\" @input=\"onStateValueChange\"/>-->\n<!--   <p>stateValue===== {{stateValue}}</p>-->\n<!--   双向绑定的方法 给计算属性设置set get -->\n   <binput v-model=\"stateValue\"/>\n   <p>stateValue===== {{stateValue}}</p>\n<!--   当v-model当中绑定的不是 在本组件中定义的变量 而是一个全局变量的时候 v-model会出现问题-->\n   <binput @input=\"handleInput\"/>\n   <p>{{inputValue}}---- last letter is {{inputValueLastLetter}}</p>\n<!--   <bshow :content=\"inputValue\"/>-->\n   <p>Appname: {{appName}}</p>\n   <p> appversion: {{appNameWitnVersion}} firstLetter is ----{{firstLetter}}</p>\n   <button @click=\"handleChangeAppName\">修改appName</button>\n   <p>appVersion: {{appVersion}}</p>\n   <button @click=\"handleChangeUserName\">修改userName</button>\n   <p>userName--- :{{userName}} </p>\n   <button @click=\"registModule\">动态注册模块</button>\n   <p v-for=\"(li, index) in todoList\" :key=\"index\">{{li}}</p>\n  </div>\n</template>\n\n<script>\nimport Ainput from '_c/Ainput'\nimport Ashow from '_c/Ashow'\n\n// 使用vuex提供的工具函数 去获取state当中的内容\n// es6结构复制 相当于\n// import vuex from 'vuex'\n// const mapState = vuex.mapState;\n// eslint-disable-next-line standard/object-curly-even-spacing,no-unused-vars\nimport { mapState, mapGetters, mapMutations, mapActions } from 'vuex'\n\n// 如果设置了 namespaced: true 使用如下方法\n// import { createNamespacedHelpers } from 'vuex'\n// 可传入模块名称\n// const { mapState } = createNamespacedHelpers('user')\n\nexport default {\n  name: 'store',\n  data () {\n    return {\n      inputValue: ''\n    }\n  },\n  // 注册这个组件\n  components: {\n    // eslint-disable-next-line vue/no-unused-components,no-undef\n    binput: Ainput,\n    bshow: Ashow\n  },\n  computed: {\n    appName () {\n      return this.$store.state.appName\n    },\n    // userName () {\n    //   return this.$store.state.user.userName\n    // }\n    // ... 展开操作符 和上面写的效果是一样 的\n    // 1、传入数组\n    // ...mapState([\n    //   'appName'\n    // ])\n    // 2、传入对象\n    // ...mapState({\n    //   appName: state => state.appName,\n    //   userName: state => state.user.userName\n    // })\n    // 3、\n    ...mapState({\n      // userName: state => state.userName,\n      appName: state => state.appName,\n      appVersion: state => state.appVersion,\n      // todoList: state => state.todo ? state.todo.todoList : []\n      // f访问子模块的方式\n      todoList: state => state.user.todo ? state.user.todo.todoList : []\n      // stateValue: state => state.stateValue\n    }),\n    // 自定义 set get\n    stateValue: {\n      get () {\n        return this.$store.state.stateValue\n      },\n      set (value) {\n        // this.SET_STATE_VALUE(value)\n        this.$store.commit('SET_STATE_VALUE', value)\n      }\n    },\n    // 4、使用mapState 而不想在里面使用user 使用方法如下\n    ...mapState('user', {\n      userName: state => state.userName\n    }),\n    // ...mapState({\n    //   userName: state => state.userName\n    // }),\n    inputValueLastLetter () {\n      return this.inputValue.substr(-1, 1)\n    },\n    // 5、 getter\n    // appNameWitnVersion () {\n    //   return this.$store.getters.appNameWitnVersion\n    // }\n    // 命名空间写法\n    ...mapGetters('user', [\n      'firstLetter'\n    ]),\n    // 非命名空间写法\n    // ...mapGetters( [\n    //   'firstLetter'\n    // ]),\n    // mapGetters 可以直接获取根级别也就是定义在mapGeeters当中的变量\n    // 当所定义的模块没有开启命名空间的时候也是可以 直接获取到模块定义的变量的 也就是user当中的firstLetter\n    // 6、mapGetters\n    ...mapGetters([\n      'appNameWitnVersion'\n    ])\n    // 7 计算属性值 set get 值的写法\n    // eslint-disable-next-line vue/no-dupe-keys\n    // appName: {\n    //   set: function (newValue) {\n    //     this.inputValue = newValue + 'set方法变化的新值'\n    //   },\n    //   get: function () {\n    //     return this.inputValue + 'get拼接'\n    //   }\n    // }\n  },\n  methods: {\n    // mapMutations的使用\n    // vue 会将根级别，非根级别的统统 注册在公共区域内 所以可以直接获取到 去调用\n    // ...mapMutations('user', [\n    //   'SET_USERNAME',\n    //   'SET_APP_NAME',\n    //   'SET_STATE_VALUE'\n    // ]),\n    ...mapMutations([\n      'SET_USERNAME',\n      'SET_APP_NAME',\n      'SET_STATE_VALUE'\n    ]),\n    ...mapActions([\n      'updateAppName'\n    ]),\n    handleInput (val) {\n      this.inputValue = val\n    },\n    handleChangeAppName () {\n      // 一个计算属性一般情况下是只有一get方法的 所以不能直接赋值\n      // 而是要通过commit方法 提交给mutation 有mutation去修改他的值\n      // 当然 第二个参数也可以是对象的写法，只不过 对应方法里面取值的时候就得用对象的取法\n      // 还有一个参数 对象的写法如{\n      // type: 'SET_APP_NAME',\n      // appName: 'newAppName'\n      // }\n      // 对应的取值也是 params.appName\n      // this.$store.commit('SET_APP_NAME', 'newAppName')\n      // this.$store.commit('SET_APP_VERSION')\n      // 若使用了 ...mapMutations 写法如下\n      // this.SET_APP_NAME('newAppName')\n      this.updateAppName()\n    },\n    handleChangeUserName () {\n      // 在index当中是 非严格模式的时候 这样是可以修改过来的\n      // this.$store.state.user.userName = 'haha'\n      this.SET_USERNAME('vue-course')\n      // 使用store上的实例来触发action\n      // this.$store.dispatch('updateAppName', '123')\n    },\n    // registModule () {\n    //   // 动态添加模块\n    //   // 第一个参数是我们要动态添加的名称\n    //   this.$store.registerModule('todo', {\n    //     state: {\n    //       todoList: [\n    //         '学习mutations',\n    //         '学习actions'\n    //       ]\n    //     }\n    //   })\n    // },\n    // 给模块添加模块\n    registModule () {\n      // 动态添加模块\n      // 第一个参数是我们要动态添加的名称\n      this.$store.registerModule(['user', 'todo'], {\n        state: {\n          todoList: [\n            '学习mutations',\n            '学习actions'\n          ]\n        }\n      })\n    },\n    onStateValueChange (val) {\n      console.log(val)\n      this.SET_STATE_VALUE(val)\n    }\n  }\n}\n\n</script>\n\n<style scoped>\n\n</style>\n"],"sourceRoot":"src/views"}]}