{"remainingRequest":"/Users/sulliven/Desktop/vue/vue-cource/node_modules/babel-loader/lib/index.js!/Users/sulliven/Desktop/vue/vue-cource/src/lib/axios.js","dependencies":[{"path":"/Users/sulliven/Desktop/vue/vue-cource/src/lib/axios.js","mtime":1574860154792},{"path":"/Users/sulliven/Desktop/vue/vue-cource/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/sulliven/Desktop/vue/vue-cource/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _classCallCheck from \"/Users/sulliven/Desktop/vue/vue-cource/node_modules/@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/sulliven/Desktop/vue/vue-cource/node_modules/@babel/runtime-corejs2/helpers/esm/createClass\";\n// eslint-disable-next-line no-unused-vars\nimport axios from 'axios';\nimport { baseURL } from '@/config';\n\nvar HttpRequest =\n/*#__PURE__*/\nfunction () {\n  // eslint-disable-next-line no-undef\n  function HttpRequest() {\n    var baseUrl = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : baseURL;\n\n    _classCallCheck(this, HttpRequest);\n\n    this.baseUrl = baseUrl;\n    this.queue = {};\n  } //相当于以下的写法\n  // constructor (baseUrl) {\n  //   baseUrl = baseUrl || baseURL\n  //   this.baseUrl = baseUrl\n  //   this.queue = {}\n  // }\n\n\n  _createClass(HttpRequest, [{\n    key: \"getInsideConfig\",\n    value: function getInsideConfig() {\n      var config = {\n        //全局当中需要使用的一些配置，写在此处\n        baseUrl: this.baseUrl,\n        header: {//\n        }\n      };\n      return config;\n    } //全局请求和拦截的拦截器\n\n  }, {\n    key: \"interceptor\",\n    value: function interceptor(instance, url) {\n      var _this = this;\n\n      //请求拦截器\n      instance.interceptors.request.use(function (config) {\n        //添加哟个全局的loading\n        //Spin组件可以产生一个全局的遮罩层，是无法进行页面的点击操作的\n        //Spin.show()\n        _this.queue;\n        console.log(config);\n        return config;\n      }, function (error) {\n        //如果出现错误则将错误直接返回\n        return Promise.reject(error);\n      }); //响应拦截器\n\n      instance.interceptors.response.use(function (res) {\n        console.log(res);\n        return res;\n      }, function (error) {\n        return Promise.reject(error);\n      });\n    }\n  }, {\n    key: \"request\",\n    value: function request(options) {\n      var instance = axios.create(); //assigin会将两个对象合并成一个对象\n      //如果两个对象内部有同样属性的值，会用后面对象的属性作为最终的属性值\n\n      options = Object.assign(this.getInsideConfig(), options); //调用定义的拦截器，这样就会给创建的实例做定义的拦截\n\n      this.interceptor(instance, options.url);\n      return instance(options);\n    }\n  }]);\n\n  return HttpRequest;\n}();\n\nexport default HttpRequest;",{"version":3,"sources":["/Users/sulliven/Desktop/vue/vue-cource/src/lib/axios.js"],"names":["axios","baseURL","HttpRequest","baseUrl","queue","config","header","instance","url","interceptors","request","use","console","log","error","Promise","reject","response","res","options","create","Object","assign","getInsideConfig","interceptor"],"mappings":";;AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,OAAR,QAAsB,UAAtB;;IAEMC,W;;;AACJ;AACA,yBAAgC;AAAA,QAAnBC,OAAmB,uEAATF,OAAS;;AAAA;;AAC9B,SAAKE,OAAL,GAAeA,OAAf;AACA,SAAKC,KAAL,GAAa,EAAb;AACD,G,CACD;AACA;AACA;AACA;AACA;AACA;;;;;sCACmB;AACjB,UAAMC,MAAM,GAAG;AACb;AACAF,QAAAA,OAAO,EAAE,KAAKA,OAFD;AAGbG,QAAAA,MAAM,EAAE,CACN;AADM;AAHK,OAAf;AAOA,aAAOD,MAAP;AACD,K,CACD;;;;gCACaE,Q,EAAUC,G,EAAI;AAAA;;AACzB;AACAD,MAAAA,QAAQ,CAACE,YAAT,CAAsBC,OAAtB,CAA8BC,GAA9B,CAAkC,UAAAN,MAAM,EAAI;AAC3C;AACC;AACA;AACA,QAAA,KAAI,CAACD,KAAL;AACAQ,QAAAA,OAAO,CAACC,GAAR,CAAYR,MAAZ;AACA,eAAOA,MAAP;AACD,OAPD,EAOG,UAAAS,KAAK,EAAI;AACV;AACA,eAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,OAVD,EAFyB,CAazB;;AACAP,MAAAA,QAAQ,CAACE,YAAT,CAAsBQ,QAAtB,CAA+BN,GAA/B,CAAmC,UAAAO,GAAG,EAAI;AACxCN,QAAAA,OAAO,CAACC,GAAR,CAAYK,GAAZ;AACA,eAAOA,GAAP;AACD,OAHD,EAGG,UAAAJ,KAAK,EAAI;AACV,eAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,OALD;AAMD;;;4BACQK,O,EAAS;AAChB,UAAMZ,QAAQ,GAAIP,KAAK,CAACoB,MAAN,EAAlB,CADgB,CAEhB;AACA;;AACAD,MAAAA,OAAO,GAAGE,MAAM,CAACC,MAAP,CAAc,KAAKC,eAAL,EAAd,EAAsCJ,OAAtC,CAAV,CAJgB,CAKhB;;AACA,WAAKK,WAAL,CAAiBjB,QAAjB,EAA0BY,OAAO,CAACX,GAAlC;AACA,aAAOD,QAAQ,CAACY,OAAD,CAAf;AACD;;;;;;AAEH,eAAejB,WAAf","sourcesContent":["// eslint-disable-next-line no-unused-vars\nimport axios from 'axios'\nimport {baseURL} from '@/config'\n\nclass HttpRequest {\n  // eslint-disable-next-line no-undef\n  constructor (baseUrl = baseURL) {\n    this.baseUrl = baseUrl\n    this.queue = {}\n  }\n  //相当于以下的写法\n  // constructor (baseUrl) {\n  //   baseUrl = baseUrl || baseURL\n  //   this.baseUrl = baseUrl\n  //   this.queue = {}\n  // }\n  getInsideConfig () {\n    const config = {\n      //全局当中需要使用的一些配置，写在此处\n      baseUrl: this.baseUrl,\n      header: {\n        //\n      }\n    }\n    return config\n  }\n  //全局请求和拦截的拦截器\n  interceptor (instance, url){\n    //请求拦截器\n    instance.interceptors.request.use(config => {\n     //添加哟个全局的loading\n      //Spin组件可以产生一个全局的遮罩层，是无法进行页面的点击操作的\n      //Spin.show()\n      this.queue\n      console.log(config)\n      return config\n    }, error => {\n      //如果出现错误则将错误直接返回\n      return Promise.reject(error)\n    })\n    //响应拦截器\n    instance.interceptors.response.use(res => {\n      console.log(res)\n      return res\n    }, error => {\n      return Promise.reject(error)\n    })\n  }\n  request (options) {\n    const instance =  axios.create()\n    //assigin会将两个对象合并成一个对象\n    //如果两个对象内部有同样属性的值，会用后面对象的属性作为最终的属性值\n    options = Object.assign(this.getInsideConfig(), options)\n    //调用定义的拦截器，这样就会给创建的实例做定义的拦截\n    this.interceptor(instance,options.url)\n    return instance(options)\n  }\n}\nexport default HttpRequest\n"]}]}